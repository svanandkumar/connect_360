/* Licensed Materials - 
 Property of IBM 6949 - 67L 
 Copyright IBM Corp. 2017, 2018 All Rights Reserved */
package  com.ibm.gbs.consentmgmt.dto;
// Generated Sep 21, 2017 1:52:20 PM by Hibernate Tools 5.1.0.Beta1

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import com.ibm.gbs.util.Constant;
/**
 * Cosdconsentgroup generated by hbm2java
 */
@Entity
@Table(name = "cosdconsentgroup", schema = Constant.SCHEMANAME )
public class Cosdconsentgroup implements java.io.Serializable {

	private BigDecimal consentgroupid;
	private String description;
	private String name;
	private String createdby;
	private Date createdon;
	private String lastupdatedby;
	private Date lastupdatedon;
	private Set<Cosdconsentgrouptxn> cosdconsentgrouptxns = new HashSet<Cosdconsentgrouptxn>(0);
	private Set<Cosdconsentexception> cosdconsentexceptions = new HashSet<Cosdconsentexception>(0);

	public Cosdconsentgroup() {
	}

	public Cosdconsentgroup(BigDecimal consentgroupid) {
		this.consentgroupid = consentgroupid;
	}

	public Cosdconsentgroup(BigDecimal consentgroupid, String description, String name, String createdby,
			Date createdon, String lastupdatedby, Date lastupdatedon, Set<Cosdconsentgrouptxn> cosdconsentgrouptxns,
			Set<Cosdconsentexception> cosdconsentexceptions) {
		this.consentgroupid = consentgroupid;
		this.description = description;
		this.name = name;
		this.createdby = createdby;
		this.createdon = createdon;
		this.lastupdatedby = lastupdatedby;
		this.lastupdatedon = lastupdatedon;
		this.cosdconsentgrouptxns = cosdconsentgrouptxns;
		this.cosdconsentexceptions = cosdconsentexceptions;
	}

	@Id
	@SequenceGenerator(schema = Constant.SCHEMANAME ,name  = "consentGrpSeq", sequenceName = "consentGrpSeq", allocationSize=1)
	@GeneratedValue(strategy=GenerationType.SEQUENCE, generator="consentGrpSeq")	
	@Column(name = "consentgroupid", unique = true, nullable = false, scale = 0)
	public BigDecimal getConsentgroupid() {
		return this.consentgroupid;
	}

	public void setConsentgroupid(BigDecimal consentgroupid) {
		this.consentgroupid = consentgroupid;
	}

	@Column(name = "description", length = 300)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "name", length = 512)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "createdby", length = 64)
	public String getCreatedby() {
		return this.createdby;
	}

	public void setCreatedby(String createdby) {
		this.createdby = createdby;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "createdon", length = 13)
	public Date getCreatedon() {
		return this.createdon;
	}

	public void setCreatedon(Date createdon) {
		this.createdon = createdon;
	}

	@Column(name = "lastupdatedby", length = 64)
	public String getLastupdatedby() {
		return this.lastupdatedby;
	}

	public void setLastupdatedby(String lastupdatedby) {
		this.lastupdatedby = lastupdatedby;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "lastupdatedon", length = 13)
	public Date getLastupdatedon() {
		return this.lastupdatedon;
	}

	public void setLastupdatedon(Date lastupdatedon) {
		this.lastupdatedon = lastupdatedon;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "cosdconsentgroup")
	public Set<Cosdconsentgrouptxn> getCosdconsentgrouptxns() {
		return this.cosdconsentgrouptxns;
	}

	public void setCosdconsentgrouptxns(Set<Cosdconsentgrouptxn> cosdconsentgrouptxns) {
		this.cosdconsentgrouptxns = cosdconsentgrouptxns;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "cosdconsentgroup")
	public Set<Cosdconsentexception> getCosdconsentexceptions() {
		return this.cosdconsentexceptions;
	}

	public void setCosdconsentexceptions(Set<Cosdconsentexception> cosdconsentexceptions) {
		this.cosdconsentexceptions = cosdconsentexceptions;
	}

}
